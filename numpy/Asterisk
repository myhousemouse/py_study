<Asterisk>

def asterisk_test(a, *args):
    print(a, args)
    print(type(args))

asterisk_test(1,2,3,4,5,6)
/* a -> 고정인자(1), *args -> 가변인자 튜플 반환(2,3,4,5,6)
즉 튜플 안에 튜플 형태가 됨 
args[0] 은 (2,3,4,5,6) 이 출력 됨 
args -> 고정인자 
*/

def asterisk_test(a, **kargs):
    print(a, kargs)
    print(type(kargs))

asterisk_test(1, b=2, c=3, d=4, e=5, f=6)
>> {'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}
/* 키워드 가변인자 **kargs 딕셔너리 형태로 저장 {b:2, c:3,d:4.e:5,f:6} 로 출력 */

def asterisk_test(a, args):
    print(a, *args)
    print(type(args))

asterisk_test(1, (2,3,4,5,6))
>> 1 2 3 4 5 6
/* print(*args)는 언패킹이 되어 출력되므로 
args는 인자가 전달된 그대로 사용
*args (언패킹해서 출력)
*/

data = ([1, 2], [3, 4], [5, 6])
print(*data)
>> [1, 2] [3, 4] [5, 6]
/*위와같이 언패킹해서 출력됨*/

for data in zip(*([1, 2], [3, 4], [5, 6])):
    print(sum(data))
>> 9
12
/*
*() -> 언패킹 과정으로 [1,2],[3,4] 로 언패킹
zip() -> 열을 기준으로 
	•	[1, 2]
	•	[3, 4]
	•	[5, 6]
1,3,5 - 2,4,6 으로 묶이게 됨 
*/
def asterisk_test(a, b, c, d, e=0):
    print(a, b, c, d, e)
data = {"d":1 , "c":2, "b":3}
asterisk_test(10, **data)
>> 10 3 2 1 0
/* 10은 고정인자 b, c, d 순으로 딕셔너리 키 값에 접근 */


